alias pyde='~/tools/reverse/uncompyle2'
alias rsact='python3 ~/tools/crypto/RsaCtfTool.py'
alias rsat='python ~/tools/crypto/rsatool.py'
alias pyobd='python ~/tools/my_tools/pyobd/pyobd.py'
alias ropg='ROPgadget --binary'
alias oneg='one_gadget'
alias upall='~/tools/my_tools/upall.sh'
alias info='python ~/tools/my_tools/info.py'
alias chsec='/usr/local/bin/chsec --file'
alias afl='afl-gcc'
alias pin='/opt/pin/pin'
alias sde='/opt/sde/sde'
alias sde64='/opt/sde/sde64'
alias q86s='/usr/local/bin/qemu/qemu-i386-static'
alias q64s='/usr/local/bin/qemu/qemu-x86_64-static'
alias qarms='/usr/local/bin/qemu/qemu-arm-static'
alias qarmd='/usr/local/bin/qemu/qemu-arm-static -L /usr/arm-linux-gnueabi'
alias qaarch64s='/usr/local/bin/qemu/qemu-aarch64-static'
alias qaarch64d='/usr/local/bin/qemu/qemu-aarch64-static -L /usr/aarch64-linux-gnu'
alias qmipss='/usr/local/bin/qemu/qemu-mips-static'
alias qmipsd='/usr/local/bin/qemu/qemu-mips-static -L /usr/mips-linux-gnu'
alias qmipsls='/usr/local/bin/qemu/qemu-mipsel-static'
alias qmipsld='/usr/local/bin/qemu/qemu-mipsel-static -L /usr/mipsel-linux-gnu'
alias qmips64s='/usr/local/bin/qemu/qemu-mips64-static'
alias qmips64d='/usr/local/bin/qemu/qemu-mips64-static -L /usr/mips64-linux-gnuabi64'
alias qmips64ls='/usr/local/bin/qemu/qemu-mips64el-static'
alias qmips64ld='/usr/local/bin/qemu/qemu-mips64el-static -L /usr/mips64el-linux-gnuabi64'

function aslr()
{
    if [ -z $1 ]; then
        cat /proc/sys/kernel/randomize_va_space
    elif [ $1 = "on" ]; then
        # full aslr
        sudo sysctl -w kernel.randomize_va_space=2
    elif [ $1 = "off" ]; then
        # close aslr
        sudo sysctl -w kernel.randomize_va_space=0
    elif [ $1 = "half" ]; then
        # stack、mmap()、VDSO aslr
        sudo sysctl -w kernel.randomize_va_space=1
    fi
}


# Remove alarm in binary
rmalarm()
{
    if [ -z $1 ]; then
        echo "Usage: $FUNCNAME <File>"
    elif [ ! -f $1 ]; then
        echo "$1 not found!"
    else
        sed s/alarm/isnan/g "$1" > $1"_noalarm"
        chmod +x $1"_noalarm"
    fi
}


# Remove sleep in binary
rmsleep()
{
    if [ -z $1 ]; then
        echo "Usage: $FUNCNAME <File>"
    elif [ ! -f $1 ]; then
        echo "$1 not found!"
    else
        sed s/sleep/isnan/g "$1" > $1"_nosleep"
        chmod +x $1"_nosleep"
    fi
}


# get pid that belogs to specific process
function maps()
{
    cat /proc/`pidof $1`/maps
}


# nasm assemble x86 & load library
function na86() {
    len=${#1};

    if [ "$len" -gt 0 ]; then
        name="$(echo "$1" | cut -d'.' -f1)";
        nasm -f elf -o "$name".o $1;
        ld -m elf_i386 -o "$name" "$name".o;
        rm -f "$name".o;
    else
        echo Must give one argument!
    fi
}

# nasm assemble x64 & load library
function na64() {
    len=${#1};

    if [ "$len" -gt 0 ]; then
        name="$(echo "$1" | cut -d'.' -f1)";
        nasm -f elf64 -o "$name".o $1;
        ld -m elf_x86_64 -o "$name" "$name".o;
        rm -f "$name".o;
    else
        echo Must give one argument!
    fi
}


# gcc compiler x86
function gc32() {
    len=${#1};
    
    if [ "$len" -gt 0 ]; then
        name="$(echo "$1" | cut -d'.' -f1)";
        gcc -m32 -o "$name" $1;
    else
        echo Must give one argument!
    fi
}

# gcc compiler x64
function gc64() {
    len=${#1};
    
    if [ "$len" -gt 0 ]; then
        name="$(echo "$1" | cut -d'.' -f1)";
        gcc -m64 -o "$name" $1;
    else
        echo Must give one argument!
    fi
}
